1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система складається з бази даних, серверної частини, IoT пристроїв, клієнтської частини та мобільної прикладної програми. У якості сервера бази даних обрано PostgreSQL. Обмін даними між сервером та БД проходить за допомогою відповідного драйверу.
Система взаємодіє з базою даних, за допомогою серверної частини. Крім цього серверна частина взаємодіє з веб – застосунком, мобільною прикладною програмою та IoT пристроями за протоколом HTTP.
Сам користувач взаємодіє з системою за допомогою свого персонального комп’ютеру чи мобільного пристрою, які у свою чергу взаємодіють з клієнтською частиною по протоколу HTTP.

2 ПОБУДОВА UML - ДІАГРАМИ РОЗГОРТАННЯ

UML – діаграма розгортання моделює фізичну архітектуру програмної системи, демонструє усі компоненти та зв’язки між ними. UML – діаграма розгортання наведена на рисунку 1.
Для розроблюваної системи обрана СУБД PostgreSQL. Для зв’язку бази даних з сервером використовується відповідний драйвер pg – hstore.
Cерверна частина системи взаємодіє з базою даних за допомогою фреймворку express. Також сервер заємодіє з IOT пристроєм, клієнтським застосунком та мобільною платформою за допомогою протоколу HTTP.
Доступ до клінтської частини та мобільної платформи відбувається за допомогою персонального комп’ютеру та мобільного пристрою відповідно.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Архітектура проекту реалізована за моделлю MVC (Model-View-Controller). Модель відповідає за управління даними та бізнес-логікою застосунку. Всі взаємодії з базою даних виконуються за допомогою ORM Sequelize, що полегшує маніпулювання даними та забезпечує інтеграцію з PostgreSQL. Модель також включає всі бізнес-правила та валідації, необхідні для забезпечення коректності даних.
Представлення відповідає за інтерфейс користувача або API, через який користувач взаємодіє з системою. Це може бути як веб-інтерфейс, створений за допомогою сучасних фронтенд технологій, так і REST API, який забезпечує зв’язок між сервером і клієнтськими компонентами системи.
Контролер відповідає за обробку запитів від користувачів, взаємодію з моделями для отримання або оновлення даних, та передачу відповідних відповідей до представлення. Контролер використовує програмну платформу Node.js та фреймворк Express.js.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

UML – діаграма прецедентів візуалізує функціональність системи та її взаємодію з акторами, тобто з користувачами або іншими ситемами. Метою створення даної діаграми є моделювання взаємодії користувачів з програмною системою. UML – діаграма предентів наведена на рисунку 2.
Як ми бачимо, в програмній системі передбачено 4 види звичайних користувачів: незареєстрований користувач, зареєстрований користувач, лікар та робітник мережі ветеринарних клінік. Незареєстрований користувач має можливість лише зареєструватися та авторизуватися в системі. Зареєстрований користувач може оформити підписку на сервіс, після чого може зареєструвати свою мережу. Лікар може сканувати свій індивідуальний код на вході до клініки для запису часу початку робочого дня, передивлятись календар записів до нього та виписувати рецепт пацієнтам. Робітник може лише використовувати систему для запису початку та кінця робочого дня на турнікеті.
Система має 3 види адміністраторів: власник мережі, адміністратор мережі, системний адміністратор. Системний адміністратор – головний адміністратор програмної системи, який може керувати усією базою даних, керувати сутностями та створювати резервні копії. Адміністратор мережі може керувати робочим складом, тобто додавати, видаляти, блокувати акаунти робітників, слідкувати за їх робочим часом. Власник мережі має усі повноваження адміністратора мережі, крім того він може редагувати дані про компанію та передивлятись статус підписки на програмну систему.

5 ПОБУДОВА ER-ДІАГРАМИ

ER -  модель даних розробляється для відображення та візуалізації структури бази даних, зосереджуючись на сутностях і їх зв'язках. ER-модель показана на рисунку 3.
ER-діаграма, що описує систему управління мережею ветеринарних клінік, включає наступні сутності:
- Компанія. Містить всю інформацію про мережі ветеринарних клінік, включаючи назву, адресу головного офісу та інші контактні дані.
- Філіал. Представляє інформацію про окремі філіали в мережі, включаючи їх адреси, контактні дані та належність до конкретної компанії.
- Користувач. Включає дані про користувачів програмної системи, зокрема імена, контактні дані та іншу необхідну інформацію.
- Роль. Описує різні ролі, які можуть виконувати користувачі, такі як адміністратор, ветеринар, асистент тощо.
- Робітник. Містить інформацію про працівників клінік, включаючи їхні імена, контактні дані, посади та інші відповідні деталі.
- Чек. Містить інформацію про чеки користувачів, включаючи деталі транзакцій та наданих послуг.
- Сервіс. Описує послуги, які можуть надавати клініки, такі як огляди, вакцинації, операції тощо.
- Тварина. Містить інформацію про тварин, включаючи їхні імена, види, породи, вік та інші медичні дані.
- Підписка. Зберігає дані про підписку користувачів на програмну систему.
- Запис до лікаря. Містить інформацію про записи користувачів до лікарів, включаючи дату, час та лікаря, до якого зроблено запис.
- Рецепт. Включає дані про виписані лікарями рецепти, зокрема назви препаратів, дозування та інструкції щодо застосування.
- Робочі часи робітника. Описує графік роботи кожного працівника клініки, включаючи дні та години роботи.

6 СПЕЦИФІКАЦІЯ REST

1. Контролер: «Запис до лікаря»
Метод: POST
URL: /api/appointmet/
Опис: Створення нового запису до лікаря
2. Контролер: «Запис до лікаря»
Метод: UPDATE
URL: /api/appointmet/update
Опис: Зміна запису до лікаря
3. Контролер: «Запис до лікаря»
Метод: DELETE
URL: /api/appointmet/
Опис: Видалення запису до лікаря
4. Контролер: «Запис до лікаря»
Метод: GET
URL: /api/appointmet/get/user
Опис: Отримання записів для користувача
5. Контролер: «Запис до лікаря»
Метод: GET
URL: /api/appointmet/get/employee
Опис: Отримання записів для лікаря
6. Контролер: «Чек»
Метод: POST
URL: /api/check
Опис: Створення нового чеку
7.Контролер: «Чек»
Метод: GET
URL: /api/check/department
Опис: Отримання чеку для клініки
8.Контролер: «Чек»
Метод: GET
URL: /api/check/user
Опис: Отримання чеку для користувача
9. Контролер: «Компанія»
Метод: POST
URL: /api/company/
Опис: Створення мережі клінік
10. Контролер: «Компанія»
Метод: PUT
URL: /api/company/
Опис: Зміна даних про мережу
11. Контролер: «Компанія»
Метод: DELETE
URL: /api/company/
Опис: Видалення мережі з системи
12. Контролер: «Філіал»
Метод: POST
URL: /api/department/
Опис: Створення філіалу
13. Контролер: «Філіал»
Метод: DELETE
URL: /api/department/
Опис: Видалення філіалу
14. Контролер: «Філіал»
Метод: GET
URL: /api/department/search
Опис: Пошук філіалу за адресою
15. Контролер: «Філіал»
Метод: PUT
URL: /api/department/
Опис: Зміна філіалу
16. Контролер: «Пристрій»
Метод: POST
URL: /api/device/start
Опис: Взаємодія з IOT пристроєм. Запис початку робочого дня працівника
17. Контролер: «Пристрій»
Метод: POST
URL: /api/device/end
Опис: Взаємодія з IOT пристроєм. Запис кінця робочого дня працівника
18. Контролер: «Робітник»
Метод: POST
URL: /api/employee/
Опис: Додавання працівника
19. Контролер: «Робітник»
Метод: PUT
URL: /api/employee/
Опис: Зміна даних працівника
20. Контролер: «Робітник»
Метод: DELETE
URL: /api/employee/
Опис: Видалення працівника
21. Контролер: «Тварина»
Метод: POST
URL: /api/pet/
Опис: Додавання нової тварини
22. Контролер: «Тварина»
Метод: GET
URL: /api/pet/id
Опис: Отримання конкретної тварини
23. Контролер: «Тварина»
Метод: GET
URL: /api/pet/user
Опис: Отримання усіх тварин користувача
24. Контролер: «Рецепт»
Метод: POST
URL: /api/prescription
Опис: Створення рецепту лікарем
25. Контролер: «Роль»
Метод: POST
URL: /api/role
Опис: Створення ролі
26. Контролер: «Роль»
Метод: GET
URL: /api/role/all
Опис: Отримання усіх ролей
27. Контролер: «Роль»
Метод: GET
URL: /api/role/user
Опис: Отримання ролі користувача
28. Контролер: «Сервіс»
Метод: POST
URL: /api/service/
Опис: Додавання нової послуги
29. Контролер: «Сервіс»
Метод: PUT
URL: /api/service/
Опис: Редагування послуги
30. Контролер: «Сервіс»
Метод: DELETE
URL: /api/service/
Опис: Видалення послуги
31. Контролер: «Підписка»
Метод: POST
URL: /api/subscription/
Опис: Створення підписки
32. Контролер: «Підписка»
Метод: GET
URL: /api/subscription//is-valid
Опис: Перевірка підписки на валідність
33. Контролер: «Користувач»
Метод: POST
URL: /api/user/register
Опис: Реєстрація
34. Контролер: «Користувач»
Метод: GET
URL: /api/user/login
Опис: Авторизація
35. Контролер: «Користувач»
Метод: PUT
URL: /api/user/ban
Опис: Блокування користувача
36. Контролер: «Користувач»
Метод: PUT
URL: /api/user/unban
Опис: Розблокування користувача
37. Контролер: «Користувач»
Метод: GET
URL: /api/user/check
Опис: Оновлення JWT токену

ВИСНОВКИ

На лабораторній роботі була розроблена серверна частина складної програмної системи. Під час проектування архітектури, розробки та втілення бізнес – процесів, розробки бази даних та втілення бізнес логіки програмної системи були створені UML – діаграми.

