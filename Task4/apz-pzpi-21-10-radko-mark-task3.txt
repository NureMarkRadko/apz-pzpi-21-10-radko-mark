1 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

В програмній системі передбачено 4 види звичайних користувачів: незареєстрований користувач, зареєстрований користувач, лікар та робітник мережі ветеринарних клінік. Незареєстрований користувач має можливість лише зареєструватися та авторизуватися в системі. Зареєстрований користувач може оформити підписку на сервіс, після чого може зареєструвати свою мережу. Лікар може сканувати свій індивідуальний код на вході до клініки для запису часу початку робочого дня, передивлятись календар записів до нього та виписувати рецепт пацієнтам. Робітник може лише використовувати систему для запису початку та кінця робочого дня на турнікеті.
Система має 3 види адміністраторів: власник мережі, адміністратор мережі, системний адміністратор. Системний адміністратор – головний адміністратор програмної системи, який може керувати усією базою даних, керувати сутностями та створювати резервні копії. Адміністратор мережі може керувати робочим складом, тобто додавати, видаляти, блокувати акаунти робітників, слідкувати за їх робочим часом. Власник мережі має усі повноваження адміністратора мережі, крім того він може редагувати дані про компанію та передивлятись статус підписки на програмну систему.

2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

У системі виділено наступні компоненти:
- Client – компонент, який представляє собою клієнта;
- Prescription – компонент, який представляє сутність підписки;
- UserManage – компонент, який забезпечує функції керування користувачами;
- SysAdmin – компонент, який представляє собою системного адміністратора;
- CompanyManage – компонент, який забезпечує функції керування мережею ветеринарних клінік;
- Employee – компонент, який представляє собою сутність робітника;
- Admin – компонент, який представляє сутність адміністратора мережі ветеринарних клінік;
- WorkHoursHistory – істрія сканування коду за допомогою IoT пристрою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

На діаграмі було виділено наступні пакети (програмні модулі):
- App – кореневий пакет застосунку;
- Pages – пакет, який містить повні сторінки, які будуть показуватися користувачу;
- Components – пакет з різними UI компонентами, з яких складаються сторінки;
- Locales – пакет з файлами локалізації;
- Utills – пакет з допоміжними функціями;
- Styles – пакет з CSS стилями.

4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Дана діаграма станів ілюструє бізнес – логіку з запису користувача на прийом до лікаря. Спочатку користувач обирає місто, дату та час для запису на прийом. Потім система обирає робітника з відповідних філіалів та перевіряє, чи є робітник лікарем, якщо ні, то система обирає  наступного робітника. Далі відбувається перевірка, чи є у лікаря «вікно» для прийому, якщо ні, то система обирає наступного працівника. Далі відбувається запис на прийом.

5 ОПИС ПРОГРАМНИХ ЗАСОБІВ

Клієнтська частина розроблена за допомогою мови програмування JavaScript та бібліотеки React. Для взаємодії з серверною частиною програмної системи використаний вбудований компонент для взаємодії по протоколу HTTP fetch. Для відображення інформації використана бібліотека i18n з підключення англійської та української мов.
Взаємодія клієнтської частини відбувається лише з серверною частиною по протоколу HTTP. Відправлення запитів відбувається за допомогою функції fetch.

6 ОПИС АРХІТЕКТУРИ

Для побудови клієнтської частини була обрана SPA (Single Page Application) архітектура. Основна ідея якої полягає в тому, що сторінка завантажується один раз при відкритті, та зазнає усіх змін димамічно без повного перезавантаження. За ідеєю цієї архітектури уся логіка розміщенна в одному компоненті та використовуються так звані гачки «useState» та «useEffect» в React.

7 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ

Опишемо авторизацію клієнтської частини. Ця логіка є дуже важливою для корректної роботи системи. Авторизація відбувається за допомогою JWT токену, який отримується від серверної частини відповіддю на запити авторизації та перевірки авторизації. Зі сторони серверної частини відбувається одностороннє хешування паролю. Після отримання JWT токену він зберігається у локальному сховищі браузера «localStorage» (див. Додаток А). Під час завантаження та відкриття клієнту токен відправляється на серверну частину для перевірки на валідність.
Тепер опишемо маршрутизацію, яка є також необхідною для роботи веб – застосунку. Відбувається за допомогою бібліотеки react-router-dom. У папці Utils збережений файл з прописаними маршрутами для кожної сторінки. Також у корені проекту є файл Routes, який прив’язує маршрути до сторінок (див. Додаток Б).
Основна сторінка складається з трьох частин: «шапки» - NavBar, основної частини та «підвалу» - Footer (див. додаток В). 
