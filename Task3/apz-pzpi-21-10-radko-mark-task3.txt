1 ПОБУДОВА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

Метою створення UML діаграми прецедентів є моделювання та візуалізація функціональності системи з точки зору її взаємодії з користувачами. На рисунку 1 зображена UML діаграма прецедентів для IoT пристрою. Діаграма включає двох основних акторів: користувача системи, який використовує IoT пристрій, та сервер, куди розумний пристрій передає дані.
Користувач може вмикати та вимикати пристрій. Крім того він може сканувати свій персональний код та отримувати пропуск від пристрою. Сканований код буде відправлений на сервер та оброблений.

2 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

UML - діаграма взаємодії зображує взаємодію об’єктів системи між собою у певному випадку використання. Вона показує роботу методів та викликів між об’єктами системи за певного сценарію.
Як ми бачимо, спочатку розумний пристрій сканує індмвідуальний код користувача. Далі цей код відправляється на серверну частину програмної системи, після чого відбувається перевірка бази даних та відправляється відповідь. В залежності від отриманої відповіді IoT пристрій надає або блокує доступ.

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності є важливим інструментом для візуалізації робочих процесів та алгоритмів у вигляді послідовностей дій і рішень. Вона дозволяє детально моделювати бізнес-процеси та поведінку програмного забезпечення, відображаючи всі етапи виконання завдань і можливі варіанти розвитку подій.
Сама UML - діаграми діяльності наведена на рисунку 3.
Пісня увімкнення IoT пристрою він під’єднується до мережі, після чого він готовий до роботи. Відбувається сканування індивідуального коду користувача та відправка цього коду на серверну частину. Сервер отримує ці дані та обробляє їх, перевіряючи у базі даних, після чого повертає результат. В залужності від результату розумний пристрій пропускає або не пропускає користувача.

4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Розробка UML діаграми станів має на меті моделювання поведінки системи залежно від її станів та подій, які впливають на ці стани. Діаграма станів дозволяє деталізувати всі можливі стани системи, починаючи з початкового стану, через проміжні стани, до кінцевого стану. Кожен перехід між станами супроводжується подією або умовою, яка його викликає.
Після вмикання пристрій сканує код та намагається пвідключитися до мережі. В разі невдачі в скануванні або підключенні до мережі Інтернет, розумний пристрій буде намагатися це зробити ще раз. Після вдалого підключення відбувається відправлення коду на сервер та отримання відповіді.

5 ОПИС ТЕХНОЛОГІЙ

Для розробки розумного пристрою використовувався емулятор Wokwi та платформа Arduino.
Сам IoT пристрій складається з контроллеру ESP32 з вбудованою підтримкою Wi-Fi, червоного та зеленого світлодіодів, цифрової клавіатури для імітації сканування коду, та сервомеханізму, який імітує турнікет.
Взаємодія пристрою за REST API відбувається по протоколу HTTP.
Перейдемо до опису програмного коду (див. додаток А). На початку прописуються піни для підключення усіх компонентів пристрою, URL сервера для відправлення запиту та дані для підключення до мережі. Далі у функції setup() відбувається підключення до мережі, налаштування світлодіодів, клавіатури та сервомеханізму. Функція turnServo() відповідає за поворот сервомеханізму в залежності від значення. Функція verifyCode відповідає за відправлення HTTP запиту на серверну частину та отримання відповіді, обробку помилок, пов’язаних з запитом. Основна логіка програмного коду знаходиться у функції loop(), де обробляється натискання на кнопки клавіатури, вмикання світлодіодів та обертання сервомеханізму.

6 ОПИС РОБОТИ IoT ПРИСТРОЮ

У програмному коді спочатку визначаються змінні, для підлючення до мережі 
Інтернет, шляху для відправки даних на сервер, та визначаються піни для світлодіодів,
клавіатури та сервомеханізму. 
У функції setup() відбувається ініціалізації світлодіодів, клавіатури та сервомеханізму, 
підключення до мережі Інтернет та вивід відповідних повідомлень.
У функції loop від користувача очікується набор цифрового коду. 
Після цього за допомогою бібліотеки HTTPClient, код по визначеному 
маршруту та методу POST відправляються на серверну частину. 
Далі отримується відповідь, та в залежності від неї працює сервомеханізм та
світлодіоди.

ВИСНОВОК

На лабораторній роботі розроблений розумний пристрій та побудовані UML – діаграми.